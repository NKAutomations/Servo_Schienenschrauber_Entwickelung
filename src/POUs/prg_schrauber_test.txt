<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Schrauber_Test" Id="{abcdefab-1234-5678-9012-345678901234}" SpecialFunc="None">
    <Declaration><![CDATA[(*
TESTPROGRAMM FÜR SERVOSCHRAUBER MIT SIMULATION
===============================================
Testet alle 4 Schraubfälle und den Normalfall
*)
PROGRAM PRG_Schrauber_Test
VAR
    // Schrauber-Instanz
    fbSchrauber             : FB_Schrauber_PnP_Neu;
    
    // Simulation
    fbSimulation            : FB_Schrauber_Simulation;
    
    // Test-Steuerung
    bTestStart              : BOOL;          // Startet einen Testdurchlauf
    bTestStop               : BOOL;          // Stoppt den Test
    nTestCase               : INT := 0;      // Aktueller Testfall (0-4)
    bAutoTest               : BOOL;          // Automatischer Test aller Fälle
    
    // Test-Parameter
    stTestParam             : ST_ParamSKSServoschrauber;
    
    // Hilfsobjekte
    fbObjSchlauch          : FB_Obj_IOSchlauch;
    stMeldung              : ST_MeldServoSchrauber_1;
    
    // Timer für automatischen Test
    tonTestStep            : TON;
    tonTestPause           : TON;
    nAutoTestStep          : INT;
    
    // Ergebnisse
    arrTestResults         : ARRAY[0..4] OF STRING(100);
    bTestRunning           : BOOL;
    sCurrentTest           : STRING(255);
    
    // Bedienung
    bQuittierung           : BOOL;
    bSimulationEnable      : BOOL := TRUE;
    
    // Visualisierung
    fVisTiefe              : LREAL;
    fVisDrehmoment         : LREAL;
    fVisDrehzahl           : LREAL;
    sVisStatus             : STRING(255);
    sVisError              : STRING(255);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Parameter initialisieren (einmalig)
IF NOT bTestRunning AND stTestParam.fParam_Sollschraubtiefe = 0 THEN
    InitializeTestParameters();
END_IF

// Simulation ausführen
fbSimulation(
    I_bSimulationEnable := bSimulationEnable,
    I_bReset := bTestStop,
    I_nSimulatedCase := nTestCase,
    I_fSollTiefe := stTestParam.fParam_Sollschraubtiefe,
    I_fMaxDrehzahl := 3000,
    I_fMaxDrehmoment := 2.0,
    I_bSchraubHub := fbSchrauber.Q_bSchraubHub,
    I_bSchrAuswurf := fbSchrauber.Q_bSchrAuswurf,
    I_nAchsId := 1,
    I_nEncId := 2
);

// Schrauber-FB aufrufen
fbSchrauber(
    // Steuerungseingänge
    I_bTaktFrg := TRUE,
    I_bTaktStop := bTestStop,
    I_bAuto := TRUE,
    I_bHand := FALSE,
    I_bQuittFehler := bQuittierung,
    I_bGrundstellung := FALSE,
    I_bSchutzbereichOK := fbSimulation.Q_bSchutzbereichOK,
    
    // Prozesseingänge
    I_bTaktStart := bTestStart,
    I_bTaktStartHalb := FALSE,
    I_bGrdstlgSchrEinh := fbSimulation.Q_bGrdstlgSchrEinh,
    I_bZustellZylAusgef := fbSimulation.Q_bZustellZylAusgef,
    
    // Parameter
    I_fSchraubTiefeAuswurf := 80.0,
    I_fTiefentoleranzPos := 1.0,
    I_fTiefentoleranzNeg := 0.5,
    I_nAchsId := 1,
    I_nEncId := 2,
    I_stParam := stTestParam,
    I_tAutoQuit := T#0S,
    
    // Optionale Eingänge
    I_bSchraubeNachschiessen := FALSE,
    I_bReferenzfahrtAktiv := FALSE,
    I_bFreigabeAuswerfen := TRUE,
    I_bSchrauberLogOn := FALSE,
    I_nMotorHersteller := 0,
    I_bHuettenSchr := FALSE,
    
    // In/Out
    IQ_fbObjSchlauch := fbObjSchlauch,
    IQ_stMeldung := stMeldung
);

// Automatischer Test
IF bAutoTest THEN
    AutomaticTestSequence();
ELSE
    nAutoTestStep := 0;
END_IF

// Visualisierungsdaten
UpdateVisualization();

// Testergebnisse speichern
IF fbSchrauber.Q_bDone OR fbSchrauber.Q_bError THEN
    SaveTestResult();
END_IF]]></ST>
    </Implementation>
    <Method Name="AutomaticTestSequence" Id="{11223344-5566-7788-9900-aabbccddeeff}">
      <Declaration><![CDATA[METHOD AutomaticTestSequence
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Automatische Testsequenz durch alle Fälle
CASE nAutoTestStep OF
    0: // Start
        sCurrentTest := 'Automatischer Test gestartet';
        nTestCase := 0;
        nAutoTestStep := 10;
        
    10: // Vorbereitung
        bTestStart := FALSE;
        bQuittierung := FALSE;
        tonTestPause(IN:=TRUE, PT:=T#1S);
        IF tonTestPause.Q THEN
            tonTestPause(IN:=FALSE);
            nAutoTestStep := 20;
        END_IF
        
    20: // Test starten
        sCurrentTest := CONCAT('Teste Fall ', INT_TO_STRING(nTestCase));
        fbObjSchlauch.I_bSchrauberBelegt := TRUE; // Schraube vorhanden
        bTestStart := TRUE;
        nAutoTestStep := 30;
        
    30: // Warten auf Abschluss
        tonTestStep(IN:=TRUE, PT:=T#10S); // Max 10s pro Test
        
        IF fbSchrauber.Q_bDone OR fbSchrauber.Q_bError OR tonTestStep.Q THEN
            tonTestStep(IN:=FALSE);
            bTestStart := FALSE;
            
            // Ergebnis speichern
            IF fbSchrauber.Q_bDone THEN
                arrTestResults[nTestCase] := 'OK';
            ELSIF fbSchrauber.Q_bError THEN
                arrTestResults[nTestCase] := CONCAT('Fehler: ', INT_TO_STRING(fbSchrauber.Q_nErrorId));
            ELSE
                arrTestResults[nTestCase] := 'Timeout';
            END_IF
            
            nAutoTestStep := 40;
        END_IF
        
    40: // Fehler quittieren falls nötig
        IF fbSchrauber.Q_bError THEN
            bQuittierung := TRUE;
            nAutoTestStep := 50;
        ELSE
            nAutoTestStep := 50;
        END_IF
        
    50: // Nächster Test
        bQuittierung := FALSE;
        tonTestPause(IN:=TRUE, PT:=T#2S);
        
        IF tonTestPause.Q THEN
            tonTestPause(IN:=FALSE);
            
            IF nTestCase < 4 THEN
                nTestCase := nTestCase + 1;
                nAutoTestStep := 10;
            ELSE
                // Alle Tests abgeschlossen
                sCurrentTest := 'Automatischer Test abgeschlossen';
                bAutoTest := FALSE;
                nAutoTestStep := 0;
            END_IF
        END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitializeTestParameters" Id="{22334455-6677-8899-0011-223344556677}">
      <Declaration><![CDATA[METHOD InitializeTestParameters
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Standard-Testparameter setzen
stTestParam.fParam_Sollschraubtiefe := -5.0;      // Solltiefe 5mm
stTestParam.fParam_SollschraubtiefeHerdumbau := 3.0;
stTestParam.fParam_Umschalttiefe := -3.0;         // Umschalttiefe 3mm
stTestParam.fSchraubTiefeSollDrehzahl := -2.0;    // Solldrehzahl ab 2mm
stTestParam.fParam_Sollmoment := 1.4;             // 1.4 Nm
stTestParam.fParam_Solldrehzahl := 80.0;          // 80% Geschwindigkeit
stTestParam.fStartDrehzahl := 20.0;               // 20% Startgeschwindigkeit

// Zeiten
stTestParam.tParam_ZeitdZustellhubSchr := T#500MS;
stTestParam.tParam_ZeitdSchraubhubSchr := T#1S;
stTestParam.tParam_ZeitdAuswurfSchr := T#500MS;
stTestParam.tParam_ZeitdSchraubTakt := T#3S;

stTestParam.bLogAnwahl := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SaveTestResult" Id="{33445566-7788-9900-1122-334455667788}">
      <Declaration><![CDATA[METHOD SaveTestResult
VAR
    sResult : STRING(100);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Testergebnis formatieren und speichern
IF fbSchrauber.Q_bDone THEN
    sResult := CONCAT('Fall ', INT_TO_STRING(nTestCase));
    sResult := CONCAT(sResult, ': ERFOLGREICH - Tiefe: ');
    sResult := CONCAT(sResult, LREAL_TO_STRING(fbSimulation.Q_fSimTiefe));
    sResult := CONCAT(sResult, 'mm, Moment: ');
    sResult := CONCAT(sResult, LREAL_TO_STRING(fbSimulation.Q_fSimDrehmoment));
    sResult := CONCAT(sResult, 'Nm');
    
ELSIF fbSchrauber.Q_bError THEN
    sResult := CONCAT('Fall ', INT_TO_STRING(nTestCase));
    sResult := CONCAT(sResult, ': FEHLER ');
    sResult := CONCAT(sResult, INT_TO_STRING(fbSchrauber.Q_nErrorId));
    sResult := CONCAT(sResult, ' - ');
    sResult := CONCAT(sResult, fbSchrauber.Q_sPosZustand);
END_IF

arrTestResults[nTestCase] := sResult;]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateVisualization" Id="{44556677-8899-0011-2233-445566778899}">
      <Declaration><![CDATA[METHOD UpdateVisualization
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Visualisierungsdaten aktualisieren
fVisTiefe := fbSimulation.Q_fSimTiefe;
fVisDrehmoment := fbSimulation.Q_fSimDrehmoment;
fVisDrehzahl := fbSimulation.Q_fSimDrehzahl;

// Status zusammensetzen
sVisStatus := fbSchrauber.Q_sStatus;

IF bAutoTest THEN
    sVisStatus := CONCAT(sVisStatus, ' | ');
    sVisStatus := CONCAT(sVisStatus, sCurrentTest);
END_IF

// Fehleranzeige
IF fbSchrauber.Q_bError THEN
    sVisError := CONCAT('FEHLER ', INT_TO_STRING(fbSchrauber.Q_nErrorId));
    sVisError := CONCAT(sVisError, ': ');
    sVisError := CONCAT(sVisError, fbSchrauber.Q_sPosZustand);
ELSE
    sVisError := 'Kein Fehler';
END_IF

// Test läuft
bTestRunning := fbSchrauber.Q_bBusy;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
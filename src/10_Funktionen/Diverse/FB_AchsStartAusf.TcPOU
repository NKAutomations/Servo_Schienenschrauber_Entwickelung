<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_AchsStartAusf" Id="{d57da852-6121-4836-9bdc-b8982a3ec325}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AchsStartAusf
VAR_INPUT

	I_nAchsNr			:INT;

	I_nSchutzBer		:INT;

	I_bAchseZurGrdP	:BOOL;
	I_bAchseZurArbP	:BOOL;
	I_bAchseStopPos	:BOOL; (*Achse wird gestoppt. Ist nur bei einem aktiven Achsstart ausführbar*)

	I_bAchseFrgGrdP	:BOOL;
	I_bAchseFrgArbP	:BOOL;
	I_bAchseFrgRglP	:BOOL;

	I_bEilSchlAchse	:BOOL;

	I_nStreckeRglP		:INT:= 10;
	I_tDauerAntrFrg	:TIME:= t#1500ms;

	(*ToDo: AchsEinzlStart
			  AchsNachStart
			  AchsNachRegeln
			  AchsOverride	
			  AchsStopp*)

END_VAR
VAR_OUTPUT

	Q_bAchsePosFehl	:BOOL;

	Q_bAchseAktiv		:BOOL;
	Q_bAchseInPos		:BOOL;
	Q_bAchseGestPos	:BOOL;

END_VAR
VAR

	nAchsezurRglP	:BOOL;
	nAchseInRglP	:BOOL;

	nAchseStart		:BOOL;
	nAchseStop		:BOOL;

	tonAntrFrg		:TON;
	
	nStepAchsStop	:INT;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[	(*Achs-Fahrauftrag ausführen*)

	IF NOT nAchseInRglP
		AND arrNcAchsen[I_nAchsNr].fPosIstwert < (arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos + I_nStreckeRglP)
		AND arrNcAchsen[I_nAchsNr].fPosIstwert > (arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos - I_nStreckeRglP)
		AND arrBetrartAutomAktiv[I_nSchutzBer]
			THEN
				nAchsezurRglP:= TRUE;
	END_IF

	IF NOT I_bAchseFrgRglP
		OR I_bAchseZurGrdP
		OR I_bAchseZurArbP
		OR (nAchsezurRglP
		AND Q_bAchseInPos)
		OR I_bEilSchlAchse
		THEN
			nAchsezurRglP:= FALSE;
			nAchseInRglP:= TRUE;
	END_IF

	IF NOT arrNcAchsen[I_nAchsNr].stFreigb.bReglerFrg
		THEN
			nAchseInRglP:= FALSE;
	END_IF

	IF I_bAchseFrgRglP
		AND (arrNcAchsen[I_nAchsNr].fPosIstwert >= (arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos + I_nStreckeRglP)
		OR arrNcAchsen[I_nAchsNr].fPosIstwert <= (arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos - I_nStreckeRglP))
		(*AND BetrartAutom_aktiv[SchutzBer]*)
			THEN
				Q_bAchsePosFehl:= TRUE;
			ELSE
				Q_bAchsePosFehl:= FALSE;
	END_IF

(**********************************************************************)
(*Achs-Fahrauftrag ausführen*)

	IF I_bAchseZurGrdP
		OR I_bAchseZurArbP
		OR nAchsezurRglP
		THEN
			(*Schleichachse*)
			IF NOT nAchseStart
				AND I_bAchseZurGrdP
				AND (arrNcAchsen[I_nAchsNr].stParam.fGrdstlgPos <= (arrNcAchsen[I_nAchsNr].fPosIstwert + 5)
				AND arrNcAchsen[I_nAchsNr].stParam.fGrdstlgPos >= (arrNcAchsen[I_nAchsNr].fPosIstwert - 5))
				AND I_bEilSchlAchse	(*Fkt. Eil.-Schleichachse (Bremswegfenster)*)
				THEN
					Q_bAchseInPos:= TRUE;
			END_IF
			IF NOT nAchseStart
				AND I_bAchseZurArbP
				AND (arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos <= (arrNcAchsen[I_nAchsNr].fPosIstwert + 5)
				AND arrNcAchsen[I_nAchsNr].stAuftrg.fPTP_ZielPos >= (arrNcAchsen[I_nAchsNr].fPosIstwert - 5))
				AND I_bEilSchlAchse	(*Fkt. Eil.-Schleichachse (Bremswegfenster)*)
				THEN
					Q_bAchseInPos:= TRUE;
			END_IF

			IF NOT Q_bAchseInPos
				AND NOT Q_bAchseGestPos
				AND (I_bAchseFrgGrdP OR NOT I_bAchseZurGrdP)
				AND (I_bAchseFrgArbP OR NOT I_bAchseZurArbP)
				AND arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_PosiFrg
				THEN
					nAchseStart:= TRUE;
			END_IF

			IF nAchseStart
				AND I_bAchseStopPos
				THEN
					nAchseStop:= TRUE;
			END_IF
			IF nAchseStart
				THEN
					IF arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_aktiv
					THEN
						Q_bAchseAktiv:= TRUE;
					END_IF
					IF arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_inZiel
					THEN
						Q_bAchseAktiv	:= FALSE;
						Q_bAchseInPos	:= TRUE;
						nAchseStart	 	:= FALSE;
						nAchseStop 	 	:= FALSE;
						
						nStepAchsStop	:= 0;	//JP
					END_IF
					IF arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_gest
					THEN
						Q_bAchseAktiv	:= FALSE;
						Q_bAchseGestPos:= TRUE;
						nAchseStart	 	:= FALSE;
						nAchseStop 	 	:= FALSE;
					END_IF
			END_IF
		ELSE
			Q_bAchseAktiv	:= FALSE;
			Q_bAchseInPos	:= FALSE;
			Q_bAchseGestPos:= FALSE;
			nAchseStart	 	:= FALSE;
			nAchseStop  	:= FALSE;
	END_IF

	(*Achse starten*)	
	IF nAchseStart
		THEN
			IF I_bAchseZurGrdP
			THEN
				arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cGrundPos]:= tonAntrFrg.Q;
				arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cBearbPos]:= FALSE;
			ELSIF I_bAchseZurArbP
				OR nAchsezurRglP
			THEN
				arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cGrundPos]:= FALSE;
				arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cBearbPos]:= tonAntrFrg.Q;
				
				nStepAchsStop	:= 1;	//JP
			END_IF
			arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_stop:= nAchseStop;
		ELSE
			arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cGrundPos]:= FALSE;
			arrNcAchsen[I_nAchsNr].stAuftrg.arrPTP_start[cBearbPos]:= FALSE;
			arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_stop:= FALSE;
			
		//JP
		CASE nStepAchsStop OF
			 0: //keine Achsbewegung vorhanden
				 arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_AutoStop:= FALSE;
			
			 1: // Achsen Stoppen, wenn keine Automatik aktiv 
				IF NOT arrBetrartAutomAktiv[I_nSchutzBer]
				THEN
					arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_AutoStop	:= TRUE;
					nStepAchsStop	:= 2;
				ELSE
					arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_AutoStop	:= FALSE;					
				END_IF
			 
			 2: // Achsen ist gestoppt 
				IF arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_gest
					OR arrBetrartAutomAktiv[I_nSchutzBer]	 
					OR I_bAchseZurGrdP // wird z.B. bei Achsfehlern benötigt
				THEN
					arrNcAchsen[I_nAchsNr].stAuftrg.bPTP_AutoStop	:= FALSE;
    				nStepAchsStop	:= 0;
				END_IF
		END_CASE
	END_IF

	tonAntrFrg (
		IN:= arrAntrGruppeFrg[I_nSchutzBer],
		PT:= I_tDauerAntrFrg
		);


]]></ST>
    </Implementation>
    <LineIds Name="FB_AchsStartAusf">
      <LineId Id="4099" Count="36" />
      <LineId Id="4271" Count="0" />
      <LineId Id="4136" Count="4" />
      <LineId Id="4272" Count="0" />
      <LineId Id="4141" Count="42" />
      <LineId Id="4277" Count="1" />
      <LineId Id="4184" Count="6" />
      <LineId Id="4274" Count="0" />
      <LineId Id="4192" Count="7" />
      <LineId Id="4280" Count="1" />
      <LineId Id="4201" Count="10" />
      <LineId Id="4283" Count="1" />
      <LineId Id="4212" Count="5" />
      <LineId Id="4285" Count="0" />
      <LineId Id="4287" Count="9" />
      <LineId Id="4407" Count="0" />
      <LineId Id="4409" Count="0" />
      <LineId Id="4297" Count="4" />
      <LineId Id="4357" Count="0" />
      <LineId Id="4302" Count="3" />
      <LineId Id="4286" Count="0" />
      <LineId Id="4218" Count="2" />
      <LineId Id="4306" Count="0" />
      <LineId Id="4221" Count="0" />
      <LineId Id="4307" Count="0" />
      <LineId Id="4222" Count="1" />
      <LineId Id="173" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>